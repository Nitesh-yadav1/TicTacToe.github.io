{"version":3,"sources":["logo.svg","Components/icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setwinMessage","changeItem","itemNumber","toast","type","position","md","color","block","onClick","map","item","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfabf908.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport {FaTimes,FaPen,FaRegCircle} from \"react-icons/fa\";\r\n\r\n\r\nconst Icon=({name})=>{\r\n    switch (name) {\r\n        case \"Circle\":\r\n            return <FaRegCircle className=\"icons\"/>\r\n        case \"Cross\":\r\n            return <FaTimes className=\"icons\"/>\r\n    \r\n        default:\r\n            return <FaPen className=\"icons\"/>\r\n            \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n\r\n}\r\n\r\nexport default Icon;","import React,{useState}  from 'react';\nimport logo from './logo.svg';\n\nimport Icon from './Components/icon';\n\nimport { ToastContainer, toast } from 'react-toastify'; // this is my toastify code\n  import 'react-toastify/dist/ReactToastify.css';\n\n import {Card,CardBody,Container,Button,Col,Row} from \"reactstrap\";\n  import 'bootstrap/dist/css/bootstrap.css';\n  import './App.css';\n\n\n  const itemArray= new Array(9).fill(\"empty\")\n\nconst App=()=> {\n\nconst[isCross,setIsCross]=useState(false);\nconst [winMessage,setwinMessage]=useState(\"\");\n\nconst reloadGame=()=>{\nsetIsCross(false);\nsetwinMessage(\"\");\nitemArray.fill(\"empty\",0,9);\n}\n\nconst checkIsWinner=()=>{\nif (itemArray[0]=== itemArray[1] &&\n  itemArray[0]=== itemArray[2]&&\n  itemArray[0]!== \"empty\") {\n    setwinMessage( ` ${itemArray[0]} won `)\n}else if(\n  itemArray[3] !==\"empty\"&&\n  itemArray[3]=== itemArray[4]&&\n  itemArray[4]===itemArray[5]\n){\n  setwinMessage( ` ${itemArray[3]} won `)\n}else if(\n  itemArray[6]!== \"empty\" &&\n  itemArray[6]=== itemArray[7] &&\n  itemArray[7]=== itemArray[8]\n){\n  setwinMessage( ` ${itemArray[6]} won `)\n}else if(\n  itemArray[0]!== \"empty\" &&\n  itemArray[0]=== itemArray[3]&&\n  itemArray[3]=== itemArray[6]\n){\n  setwinMessage( ` ${itemArray[0]} won `)\n}else if(\n  itemArray[1]!==\"empty\" &&\n  itemArray[1]===itemArray[4] &&\n  itemArray[4]===itemArray[7]\n){\n  setwinMessage( ` ${itemArray[1]} won `)\n}else if(\n  itemArray[2]!== \"empty\" &&\n  itemArray[2]=== itemArray[5] &&\n  itemArray[5]=== itemArray[8]\n){\n  setwinMessage( ` ${itemArray[2]} won `)\n}else if(\n  itemArray[0]!==\"empty\" &&\n  itemArray[0]===itemArray[4]&&\n  itemArray[4]===itemArray[8]\n){\n  setwinMessage( ` ${itemArray[0]} won `)\n}else if(\n  itemArray[2]!== \"empty\" &&\n  itemArray[2]===itemArray[4] &&\n  itemArray[4]===itemArray[6]\n){\n  setwinMessage( ` ${itemArray[2]} won `)\n}\n}\n\nconst changeItem=itemNumber=>{\nif (winMessage) {\n  return toast(winMessage, {type: \"success\"});\n  \n}\n\nif (itemArray[itemNumber] === \"empty\") {\n  itemArray[itemNumber]= isCross ? \"Cross\": \"Circle\"\n  setIsCross(!isCross);\n  \n}else{\n  return toast(\"already filled\", {type:\"error\"})\n}\ncheckIsWinner();\n\n}\n\n  return (\n    // Containers are used to contain, pad, and (sometimes) center the content within them\n    <Container className=\"p-5\"> \n      <ToastContainer position=\"bottom-center\" />\n    <Row>\n      <Col md ={6} className=\"offset-md-3\">\n        {winMessage ? (\n          <div className=\"mb-2 mt-2\">\n            <h1 className=\"text-success text-uppercase text-center\">\n              {winMessage}\n            </h1>\n            <Button color=\"success\" block\n            onClick={reloadGame}\n            >\n              Reload The Game\n            </Button>\n\n          </div>\n        ): (\n          <h1 className=\" text-center text-warning\">\n            {isCross ? \"Cross\": \"Circle\"} turns\n          </h1>\n        )}\n        <div className=\"grid\">\n          {itemArray.map((item, index)=>(\n              <Card onClick={()=>changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n\n                </CardBody>\n              </Card>\n            )\n          )}\n        </div>\n      </Col>\n    </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}